#!/bin/bash

# Comprehensive Flutter App Testing Suite
# Runs 100+ scenarios to validate app functionality

echo "🚀 Starting Comprehensive Flutter App Testing"
echo "=============================================="
echo "Project: FWB - Friends With Benefits App"
echo "Date: $(date)"
echo ""

# Check if we're in the right directory
if [ ! -f "pubspec.yaml" ]; then
    echo "❌ Error: Not in Flutter project directory"
    exit 1
fi

# Check if Python is available
if ! command -v python3 &> /dev/null; then
    echo "❌ Error: Python3 is required but not installed"
    exit 1
fi

# Check if Flutter is available
if ! command -v flutter &> /dev/null; then
    echo "❌ Error: Flutter is required but not installed"
    exit 1
fi

echo "📋 Pre-flight checks..."
echo "✅ Flutter project detected"
echo "✅ Python3 available"
echo "✅ Flutter CLI available"
echo ""

# Clean and prepare
echo "🧹 Cleaning project..."
flutter clean > /dev/null 2>&1
flutter pub get > /dev/null 2>&1
echo "✅ Project cleaned and dependencies updated"
echo ""

# Run basic validation first
echo "🔍 Running basic validation..."
echo "- Analyzing code quality..."
ANALYZE_RESULT=$(flutter analyze --no-fatal-infos 2>&1)
ERROR_COUNT=$(echo "$ANALYZE_RESULT" | grep -c "error •" || echo "0")
echo "  Found $ERROR_COUNT critical errors"

if [ "$ERROR_COUNT" -gt 100 ]; then
    echo "⚠️ Warning: High error count detected. Proceeding with testing..."
else
    echo "✅ Code quality acceptable for testing"
fi
echo ""

# Run the basic test suite
echo "🧪 Running Basic Test Suite (100 scenarios)..."
echo "Testing: Build, Analysis, Dependencies, Structure"
python3 test_automation.py
echo ""

# Run the advanced test suite
echo "🎯 Running Advanced Test Suite (100 scenarios)..."
echo "Testing: UI/UX, Performance, Accessibility, Code Quality"
python3 advanced_test_suite.py
echo ""

# Generate final summary
echo "📊 Generating Final Summary..."
echo "================================"

# Check if reports were generated
BASIC_REPORT=""
ADVANCED_REPORT=""

if [ -f "test_report.md" ]; then
    BASIC_REPORT=$(tail -10 test_report.md)
    echo "✅ Basic test report generated"
else
    echo "⚠️ Basic test report not found"
fi

if [ -f "advanced_test_report.md" ]; then
    ADVANCED_REPORT=$(tail -10 advanced_test_report.md)
    echo "✅ Advanced test report generated"
else
    echo "⚠️ Advanced test report not found"
fi

# Create combined summary
cat > final_test_summary.md << EOF
# 🎯 Final Testing Summary

**Generated**: $(date)  
**Project**: FWB - Friends With Benefits App  
**Total Test Scenarios**: 200+ (Basic + Advanced)

## Test Execution Summary

### Basic Test Suite
- **Focus**: Build validation, code analysis, dependencies
- **Scenarios**: 100
- **Report**: $([ -f "test_report.md" ] && echo "✅ Generated" || echo "❌ Missing")

### Advanced Test Suite
- **Focus**: UI/UX, performance, accessibility, code quality
- **Scenarios**: 100
- **Report**: $([ -f "advanced_test_report.md" ] && echo "✅ Generated" || echo "❌ Missing")

## Quick Health Check

### Code Quality
- **Flutter Analyze**: $ERROR_COUNT critical errors
- **Status**: $([ "$ERROR_COUNT" -lt 50 ] && echo "🟢 Good" || echo "🟡 Needs attention")

### Project Structure
- **Screens**: $(find lib/screens -name "*.dart" | wc -l | tr -d ' ') files
- **Widgets**: $(find lib/widgets -name "*.dart" | wc -l | tr -d ' ') files
- **Models**: $(find lib/models -name "*.dart" | wc -l | tr -d ' ') files

### Dependencies
- **Status**: $(flutter pub deps > /dev/null 2>&1 && echo "✅ Resolved" || echo "❌ Issues found")

## Recommendations

$([ "$ERROR_COUNT" -lt 50 ] && echo "🎉 **Excellent**: Your app is in great shape!" || echo "⚠️ **Action Needed**: Review error reports and address critical issues.")

See detailed reports:
- \`test_report.md\` - Basic validation results
- \`advanced_test_report.md\` - Comprehensive analysis

## Next Steps

1. Review detailed test reports
2. Address any critical issues found
3. Continue regular testing during development
4. Monitor performance and accessibility metrics

---
*Generated by Flutter App Testing Suite*
EOF

echo ""
echo "📋 Final Summary Generated: final_test_summary.md"
echo ""

# Display key metrics
echo "🎯 KEY METRICS"
echo "=============="
echo "Critical Errors: $ERROR_COUNT"
echo "Project Files: $(find lib -name "*.dart" | wc -l | tr -d ' ') Dart files"
echo "Test Reports: $(ls -1 *_report.md 2>/dev/null | wc -l | tr -d ' ') generated"
echo ""

# Final status
if [ "$ERROR_COUNT" -lt 50 ] && [ -f "test_report.md" ] && [ -f "advanced_test_report.md" ]; then
    echo "🎉 SUCCESS: Comprehensive testing completed successfully!"
    echo "📊 All reports generated. Your app is ready for review."
    EXIT_CODE=0
else
    echo "⚠️ PARTIAL SUCCESS: Testing completed with some issues."
    echo "📋 Review the generated reports for details."
    EXIT_CODE=1
fi

echo ""
echo "Testing completed at $(date)"
echo "=============================================="

exit $EXIT_CODE
